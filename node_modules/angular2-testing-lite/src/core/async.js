"use strict";
/**
 * Wraps a test function in an asynchronous test zone. The test will automatically
 * complete when all asynchronous calls within this zone are done. Can be used
 * to wrap an {@link inject} call.
 *
 * Example:
 *
 * ```
 * it('...', async(inject([AClass], (object) => {
 *   object.doSomething.then(() => {
 *     expect(...);
 *   })
 * });
 * ```
 */
function async(fn) {
    return function () {
        return new Promise(function (finishCallback, failCallback) {
            var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];
            var testZoneSpec = new AsyncTestZoneSpec(finishCallback, failCallback, 'test');
            // Override default error handler
            testZoneSpec.onHandleError = function (parentZoneDelegate, currentZone, targetZone, error) {
                var result = parentZoneDelegate.handleError(targetZone, error);
                if (result) {
                    // NOTE: origin
                    // testZoneSpec._failCallback(error.message ? error.message : 'unknown error');
                    testZoneSpec._failCallback(error);
                    testZoneSpec._alreadyErrored = true;
                }
                return false;
            };
            var testZone = Zone.current.fork(testZoneSpec);
            // enable onHandleError 
            return testZone.runGuarded(fn);
        });
    };
}
exports.async = async;
