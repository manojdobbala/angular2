"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var test_model_spec_1 = require("../models/test.model.spec");
var TestService = (function () {
    function TestService(http) {
        this.http = http;
    }
    TestService.prototype.get = function (id) {
        return this.http.get("/" + id)
            .map(function (resp) { return resp.json(); });
    };
    TestService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http])
    ], TestService);
    return TestService;
}());
exports.TestService = TestService;
/**
 *  ===== testing world =====
 */
var assert = require("power-assert");
var testing_1 = require("@angular/http/testing");
var core_2 = require("../../../core");
var mocha_1 = require("../../../mocha");
mocha_1.describe("TestService", function () {
    mocha_1.beforeEachProviders(function () { return [
        http_1.BaseRequestOptions,
        testing_1.MockBackend,
        core_1.provide(http_1.Http, {
            useFactory: function (backend, options) {
                return new http_1.Http(backend, options);
            }, deps: [testing_1.MockBackend, http_1.BaseRequestOptions]
        }),
        TestService
    ]; });
    mocha_1.it("can instantiate", core_2.inject([TestService], function (service) {
        assert(!!service);
    }));
    mocha_1.describe("get(id)", function () {
        mocha_1.beforeEach(core_2.inject([testing_1.MockBackend], function (backend) {
            backend.connections.subscribe(function (c) {
                var resp = new test_model_spec_1.TestModel("mocked!");
                c.mockRespond(new http_1.Response(new http_1.ResponseOptions({
                    status: 200,
                    body: resp
                })));
            });
        }));
        mocha_1.it("should return mocked TestModel", core_2.async(core_2.inject([TestService], function (service) {
            service.get("test").toPromise()
                .then(function (resp) {
                assert(!!resp);
                assert(resp.text === "mocked!");
            });
        })));
    });
});
